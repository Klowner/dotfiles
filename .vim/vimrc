" vim:fdm=marker:ts=4:sw=4:et:
"        _
" __   _(_)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|
"
" Mark's .vimrc
"-----------------------------
" Section: Key Mappings {{{1
"
"------------------------------------------------------------------------------
nmap \e :NERDTreeToggle<CR>
nmap \t :set expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
nmap \T :set expandtab tabstop=8 shiftwidth=8 softtabstop=4<CR>
nmap \r :TagbarToggle<CR>

"" buffa flippin'
map <C-e> :e#<CR>
map <C-n> :bnext<CR>
map <C-p> :bprev<CR>

"" Retab
:command! -range=% -nargs=0 Tab2Space execute '<line1>,<line2>s#^\t\+#\=repeat(" ", len(submatch(0))*' . &ts . ')'
:command! -range=% -nargs=0 Space2Tab execute '<line1>,<line2>s#^\( \{'.&ts.'\}\)\+#\=repeat("\t", len(submatch(0))/' . &ts . ')'

"" :R read output
:command! -nargs=* -complete=shellcmd R new | setlocal buftype=nofile bufhidden=hide noswapfile | r !<args>

nnoremap <space> za
nnoremap <CR> za
vnoremap <space> zf



" Section: NeoBundle Config {{{1
"------------------------------------------------------------------------------
if has('vim_starting')
    set nocompatible
    set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#rc(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'

let g:make = 'gmake'
if system('uname -o') =~ '^GNU/'
    let g:make = 'make'
endif

" Section: NeoBundle Bundles {{{1
"------------------------------------------------------------------------------

NeoBundle 'Shougo/vimproc.vim', {'build': {'unix': g:make}}


NeoBundle 'L9'
NeoBundle 'FuzzyFinder'
NeoBundle 'Lokaltog/vim-easymotion'
NeoBundle 'bling/vim-airline'
NeoBundle 'gregsexton/gitv'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'tComment'
NeoBundle 'timcharper/textile.vim'
NeoBundle 'tpope/vim-abolish'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-ragtag'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'tpope/vim-eunuch'
NeoBundle 'ciaranm/detectindent'
NeoBundle 'vim-scripts/bufkill.vim'
NeoBundle 'groenewege/vim-less'
NeoBundle 'Valloric/YouCompleteMe', {'build': {'unix': './install.sh' }}
NeoBundle 'embear/vim-localvimrc'
NeoBundle 'xolox/vim-misc'
NeoBundle 'xolox/vim-lua-ftplugin'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'amdt/vim-niji'
NeoBundle 'mattn/webapi-vim'
NeoBundle 'mattn/gist-vim'
NeoBundle 'docunext/closetag.vim'

" Syntax
NeoBundle 'digitaltoad/vim-jade'
NeoBundle 'tpope/vim-haml'
NeoBundle 'tpope/vim-markdown'
NeoBundle 'ap/vim-css-color'
NeoBundle 'nono/vim-handlebars'
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'vim-scripts/django.vim'
NeoBundle 'mitsuhiko/vim-jinja'
NeoBundle '0rca/vim-mikrotik'

" Color schemes
NeoBundle 'tomasr/molokai'
NeoBundle 'jnurmine/Zenburn'
NeoBundle 'altercation/vim-colors-solarized'

filetype plugin indent on

NeoBundleCheck


" Section: Plugin settings {{{1
"------------------------------------------------------------------------------
let mapleader = ","
let maplocalleader = ","

" vimspell.vim
let spell_auto_type = ""

" NERD_tree.vim
let NERDTreeIgnore = ['\~$', '\.pyc$']

" Syntastic
let g:syntastic_enable_signs=1
let g:syntastic_auto_jump=0
let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
let g:syntastic_javascript_jslint_conf = "--nomen"

" Ctrlp.vim
let g:ctrlp_map = '<Leader>t'
let g:ctrlp_match_window_bottom = 0
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_dotfiles = 0
let g:ctrlp_switch_buffer = 0
nmap ; :CtrlPBuffer<CR>

filetype plugin indent on

" vim-airline
let g:airline_left_sep = '⮀'
let g:airline_left_alt_sep = '⮁'
let g:airline_right_sep = '⮂'
let g:airline_right_alt_sep = '⮃'
let g:airline_symbols = {}
let g:airline_symbols.branch = '⭠'
let g:airline_symbols.readonly = '⭤'
let g:airline_symbols.linenr = '⭡'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline_theme = 'luna'

" Fugitive
map \b :Gblame<CR>
map \l :Glog<CR>

" localvimrc
let g:localvimrc_persistent = 2

" Python stuff
au BufRead,BufNewFile *.py,*pyw set expandtab

"allow auto switching
set autowrite

" Section: Color and syntax {{{1
"------------------------------------------------------------------------------

syntax on
set background=dark

" Spell checking
map <leader>ss :setlocal spell!<cr>
map <leader>sn ]s
map <leader>sp [s

" Helper to initialize Zenburn colors in 256-color mode.
function! ColorTermZenburn()
    let g:zenburn_high_Contrast=1
    let g:zenburn_disable_Label_underline=1
    try
        colorscheme zenburn
    catch
    endtry
    highlight normal ctermbg=234
    highlight SpecialKey cterm=NONE ctermfg=235 ctermbg=None
endfunction

function! ColorTermSolarized()
    let g:solarized_termcolors=256
    let g:solarized_contrast="high"
    let g:solarized_termtrans=0
    try
        colorscheme solarized
    catch
    endtry
    highlight SpecialKey cterm=NONE ctermfg=235 ctermbg=None
endfunction

function! ColorTermMolokai()
    let g:molokai_original=1
    let g:rehash256=1
    try
        colorscheme molokai
    catch
    endtry
    highlight SpecialKey cterm=NONE ctermfg=235 ctermbg=None
endfunction

" Highlight trailing whitespace with garish color
function! HighlightExtraWhitespace()
    highlight ExtraWhitespace ctermfg=red
    match ExtraWhitespace /\s\+$/
    highlight SpecialKey ctermbg=None
endfunction

" Trim whitespace
function! StripExtraWhitespace()
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction

if !has('gui_running')
    if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
        set t_Co=256
        "call ColorTermZenburn()
        "call ColorTermSolarized()
        call ColorTermMolokai()
        call HighlightExtraWhitespace()
    elseif has("terminfo")
        colorscheme default
        set t_Co=8
        set t_Sf=[3%p1%dm
        set t_Sb=[3%p1%dm
    else
        colorscheme default
        set t_Co=8
        set t_Sf=[3%dm
        set t_Sb=[3%dm
    endif
endif


" Resume previous position in buffer when opened
function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END

" Section: Special options for specific filetypes
"------------------------------------------------------------------------------
autocmd FileType less setlocal noexpandtab sw=4
autocmd FileType css setlocal noexpandtab sw=4

" Additional syntax modes
autocmd BufRead,BufNewFile *.frag,*.vert,*.vp,*.fp,*glsl set filetype=glsl
autocmd BufRead,BufNewFile *.py set expandtab

" Section: Spellcheck {{{1
"------------------------------------------------------------------------------

" Spell check all git commit messages
au BufNewFile,BufRead COMMIT_EDITMSG set spell

" Spell check all the things
set spell

" Underline mispellings
hi clear SpellBad
hi SpellBad cterm=underline

" Section: Vim options {{{1
"------------------------------------------------------------------------------
set ts=4
set sw=4
set autoindent                      " Carry over indenting from previous line
set autoread                        " Auto read when a file changes
set backspace=indent,eol,start
set cindent
set smarttab

silent! set foldmethed=marker       " Use braces by default
set hlsearch                        " Highlight searching
set ignorecase                      " Case insensitive
set incsearch                       " Search as you type
set infercase                       " Completion recognizes capitalization
set list                            " Show invisible characters in listchars
set listchars=tab:→\ ,trail:←,extends:»,precedes:«
set smartcase
set showmatch                       " Hilight matching braces/parens/etc.
set laststatus=2                    " So powerline shows up
set scrolloff=15                    " Keep cursor away from this many chars top/bottom
set scroll=4
set backupdir=~/tmp

set matchtime=2
set modelines=5
set modeline

" Don't exit visual mode when shifting
vnoremap < <gv
vnoremap > >gv

" Hotkey ctrl-o to :sort in visual mode
vmap <C-o> :sort<cr>

" Section: Optional features {{{1
"------------------------------------------------------------------------------


" Add let g:TrimWhitespace=1 to .lvimrc to enable automatic whitespace trim
function! StripWhitespaceIfEnabled()
    if exists('g:TrimWhitespace')
        call StripExtraWhitespace()
    end
endfunction

autocmd BufWritePre * call StripWhitespaceIfEnabled()


" Section: Load ~/.vimlocal {{{1
"------------------------------------------------------------------------------
source ~/.vimlocal
