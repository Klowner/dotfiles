" vim:fdm=marker:ts=4:sw=4:et:
"        _
" __   _(_)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|
"
" Mark's .vimrc
"-----------------------------
" Section: Key Mappings {{{1
"------------------------------------------------------------------------------
nmap \e :NERDTreeToggle<CR>
nmap \t :set expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
nmap \T :set expandtab tabstop=8 shiftwidth=8 softtabstop=4<CR>

"" buffa flippin'
map <C-e> :e#<CR>
map <C-n> :bnext<CR>
map <C-p> :bprev<CR>

nnoremap <space> za
nnoremap <CR> za
vnoremap <space> zf

" Section: Plugin settings {{{1
"------------------------------------------------------------------------------
runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()
execute pathogen#helptags()

" NERD_tree.vim
let NERDTreeIgnore = ['\~$', '\.pyc$']

" Syntastic
let g:syntastic_enable_signs=1
let g:syntastic_auto_jump=0
let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'

" Ctrlp.vim
let g:ctrlp_map = '<Leader>t'
let g:ctrlp_match_window_bottom = 0
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_dotfiles = 0
let g:ctrlp_switch_buffer = 0
nmap ; :CtrlPBuffer<CR>

" Section: Color and syntax {{{1
"------------------------------------------------------------------------------
" Helper to initialize Zenburn colors in 256-color mode.
function! ColorTermZenburn()
    colorscheme zenburn
    highlight normal ctermbg=234
    let g:zenburn_high_Contrast = 1
endfunction

if !has('gui_running')
    if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
        set t_Co=256
        call ColorTermZenburn()
    elseif has("terminfo")
        colorscheme default
        set t_Co=8
        set t_Sf=[3%p1%dm
        set t_Sb=[3%p1%dm
    else
        colorscheme default
        set t_Co=8
        set t_Sf=[3%dm
        set t_Sb=[3%dm
    endif
endif
syntax on


if $TERM == "xterm-256color"
	set t_Co=256
endif

"-------

autocmd BufRead,BufNewFile *.frag,*.vert,*.vp,*.fp,*.glsl set filetype=glsl

augroup stripTrailingWhitespace
	autocmd BufWritePre * :%s/\s\+$//e
augroup END

set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
hi NonText ctermfg=8 guifg=grey
hi SpecialKey ctermfg=8

:nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

"autoremove all trailing whitespace


function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END

" Section: Vim options {{{1
"------------------------------------------------------------------------------

set autoindent
set autoread
set backspace=indent,eol,start
set cindent

silent! set foldmethed=marker       " Use braces by default
set hlsearch                        " Highlight searching
set ignorecase                      " Case insensitive
set incsearch                       " Search as you type
set infercase                       " Completion recognizes capitalization
set list                            " Show invisible characters in listchars
set listchars=tab:▶\ ,trail:◀,extends:»,precedes:«
set smartcase
set showmatch                       " Hilight matching braces/parens/etc.
