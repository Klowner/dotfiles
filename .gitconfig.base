[user]
	name = Mark Riedesel
	email = mark@klowner.com

[core]
	editor = vim
	whitespace = trailing-space,space-before-tab
	pager = less -x4

[gist]
	private = yes

[github]
	user = klowner

[color]
	diff = auto
	status = auto
	branch = auto
	blame = auto

[log]
	decorate = short

[push]
	default = simple

[pack]
	windowMemory = 2048m

[alias]
	# A much nicer log
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit

	# Branch log - show the log between HEAD and the current branch's parent branch
	blg = !git lg $(git pb)..HEAD

	# from http://stackoverflow.com/questions/591923/make-git-automatically-remove-trailing-whitespace-before-committing/15398512
	# Logic:
	#
	# The 'git stash save' fails if the tree is clean (instead of
	# creating an empty stash :P). So, we only 'stash' and 'pop' if
	# the tree is dirty.
	#
	# The 'git rebase --whitespace=fix HEAD~' throws away the commit
	# if it's empty, and adding '--keep-empty' prevents the whitespace
	# from being fixed. So, we first check that the index is dirty.
	#
	# Also:
	# - '(! git diff-index --quiet --cached HEAD)' is true (zero) if
	#   the index is dirty
	# - '(! git diff-files --quiet .)' is true if the tree is dirty
	#
	# The 'rebase --whitespace=fix' trick is from here:
	# http://stackoverflow.com/a/19156679/470844
	fixws = !"\
		  if (! git diff-files --quiet .) && \
		     (! git diff-index --quiet --cached HEAD) ; then \
		    git commit -m FIXWS_SAVE_INDEX && \
		    git stash save FIXWS_SAVE_TREE && \
		    git rebase --whitespace=fix HEAD~ && \
		    git reset --soft HEAD~ && \
		    git stash pop ; \
		  elif (! git diff-index --quiet --cached HEAD) ; then \
		    git commit -m FIXWS_SAVE_INDEX && \
		    git rebase --whitespace=fix HEAD~ && \
		    git reset --soft HEAD~ ; \
		fi"


	# The different cases are:
	# # - dirty tree and dirty index
	# # - dirty tree and clean index
	# # - clean tree and dirty index
	# #
	# # We have to consider separate cases because the 'git rebase
	# # --whitespace=fix' is not compatible with empty commits (adding
	# # '--keep-empty' makes Git not fix the whitespace :P).
	fixws-global-tree-and-index = !"\
		  if (! git diff-files --quiet .) && \
		     (! git diff-index --quiet --cached HEAD) ; then \
		    git commit -m FIXWS_SAVE_INDEX && \
		    git add -u :/ && \
		    git commit -m FIXWS_SAVE_TREE && \
		    git rebase --whitespace=fix HEAD~2 && \
		    git reset HEAD~ && \
		    git reset --soft HEAD~ ; \
		  elif (! git diff-files --quiet .) ; then \
		    git add -u :/ && \
		    git commit -m FIXWS_SAVE_TREE && \
		    git rebase --whitespace=fix HEAD~ && \
		    git reset HEAD~ ; \
		  elif (! git diff-index --quiet --cached HEAD) ; then \
		    git commit -m FIXWS_SAVE_INDEX && \
		    git rebase --whitespace=fix HEAD~ && \
		    git reset --soft HEAD~ ; \
		  fi"

	# Current branch
	cb = rev-parse --abbrev-ref HEAD

	# Parent branch
	pb = !"git show-branch -a 2>/dev/null | grep '\\*' | grep -v \"$(git cb)\" | head -n1 | sed 's/.*\\[\\(.*\\)\\].*/\\1/' | sed 's/[\\^~].*//'"

	# Backport the working branch to the specified branch using cherry-pick
	bp = !"\
		if [[ -n '${1}' ]]; then \
			RELVER=$(echo ${1} | sed -n 's/[^\\/]*\\/\\([0-9]*\\)/\\1/p'); \
			PARENT=$(git pb); \
			SOURCE=$(git cb); \
			NEWBRANCH=${SOURCE}-${RELVER}; \
			git branch ${NEWBRANCH} ${1} && \
			git checkout ${NEWBRANCH} && \
			git cherry-pick -x ${PARENT}..${SOURCE}; \
		fi; echo ${1-Please specify a branch to backport to} "


[merge]
	tool = diffconflicts

[mergetool "diffconflicts"]
	cmd = diffconflicts vim $BASE $LOCAL $REMOTE $MERGED
	trustExitCode = true
	keepBackup = false

[apply]
	whitespace = fix

[filter "spellfile"]
	smudge = cat
	clean = sort -u
